cmake_minimum_required(VERSION 3.4.1)

project(ShadowHook)

# 设置架构相关变量
if(${ANDROID_ABI} STREQUAL "arm64-v8a")
    set(ARCH "arm64")
    set(ARCH_LINK_FLAGS "-Wl,-z,max-page-size=16384")
    set(ARCH_SRC
            sh_enter.c
            sh_exit.c
            sh_hub.c
            sh_linker.c
            sh_recorder.c
            sh_safe.c
            sh_switch.c
            sh_task.c
            sh_jni.c
            shadowhook.c
            common/bytesig.c
            common/sh_errno.c
            common/sh_log.c
            common/sh_trampo.c
            common/sh_util.c
            third_party/xdl/xdl.c
            third_party/xdl/xdl_iterate.c
            third_party/xdl/xdl_linker.c
            third_party/xdl/xdl_lzma.c
            third_party/xdl/xdl_util.c
            arch/arm64/sh_a64.c
            arch/arm64/sh_inst.c
    )
elseif(${ANDROID_ABI} STREQUAL "armeabi-v7a")
    set(ARCH "arm")
    set(ARCH_LINK_FLAGS "")
    set(ARCH_SRC
            sh_enter.c
            sh_exit.c
            sh_hub.c
            sh_linker.c
            sh_recorder.c
            sh_safe.c
            sh_switch.c
            sh_task.c
            sh_jni.c
            shadowhook.c
            common/bytesig.c
            common/sh_errno.c
            common/sh_log.c
            common/sh_trampo.c
            common/sh_util.c
            third_party/xdl/xdl.c
            third_party/xdl/xdl_iterate.c
            third_party/xdl/xdl_linker.c
            third_party/xdl/xdl_lzma.c
            third_party/xdl/xdl_util.c
            arch/arm/sh_a32.c
            arch/arm/sh_inst.c
            arch/arm/sh_t16.c
            arch/arm/sh_t32.c
            arch/arm/sh_txx.c
    )
endif()


## ===== 单独模块：myhook =====
add_library(myhook SHARED myhook4.cpp)
target_compile_features(myhook PUBLIC cxx_std_17)
target_include_directories(myhook PUBLIC
        .
        include
        arch/${ARCH}
        common
        third_party/xdl
        third_party/bsd
        third_party/lss
        ../../Il2CppOutputProject/IL2CPP/libil2cpp
)
target_link_libraries(myhook log shadowhook)
target_link_options(myhook PUBLIC ${ARCH_LINK_FLAGS})


# ===== 主库：shadowhook =====
add_library(shadowhook SHARED ${ARCH_SRC})
target_compile_features(shadowhook PUBLIC c_std_17)
target_include_directories(shadowhook PUBLIC
        .
        include
        arch/${ARCH}
        common
        third_party/xdl
        third_party/bsd
        third_party/lss
)
target_link_libraries(shadowhook log)
target_link_options(shadowhook PUBLIC ${ARCH_LINK_FLAGS})


# ===== nothing 模块保持不变 =====
add_library(shadowhook_nothing SHARED nothing/sh_nothing.c)
target_compile_options(shadowhook_nothing PUBLIC -Oz -Weverything -Werror -fno-ident -fno-unwind-tables -fno-asynchronous-unwind-tables)
target_link_options(shadowhook_nothing PUBLIC ${ARCH_LINK_FLAGS} -Wl,--strip-all -Wl,--as-needed -Wl,--hash-style=sysv -Wl,--build-id=none -Wl,-nostdlib -nostartfiles -nodefaultlibs)
find_program(LLVM_OBJCOPY_PATH NAMES "llvm-objcopy" PATHS ${ANDROID_NDK}/toolchains/llvm/prebuilt/*/bin NO_DEFAULT_PATH)
if(LLVM_OBJCOPY_PATH)
    add_custom_command(TARGET shadowhook_nothing POST_BUILD
            COMMAND ${LLVM_OBJCOPY_PATH} --remove-section=.comment --remove-section=.ARM.attributes $<TARGET_FILE:shadowhook_nothing>
    )
endif()
